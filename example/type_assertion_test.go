// Code generated by codeParser. DO NOT EDIT.
// Code generated by codeParser. DO NOT EDIT.
// Code generated by codeParser. DO NOT EDIT.

package example

import (
	"caseGenerator/example/dict"
	"caseGenerator/utils"
	"context"
	"errors"
	"testing"
	"time"
)

func Test_type_assertionTypeAssertionAnyTest0(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req any
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "TypeAssertionAnyTest0",
			args: args{

				req: utils.Empty[any](),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			TypeAssertionAnyTest(tt.args.req)

		})
	}
}

func Test_type_assertionTypeAssertionAnyTest1(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req any
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "TypeAssertionAnyTest1",
			args: args{

				req: utils.Empty[any](),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			TypeAssertionAnyTest(tt.args.req)

		})
	}
}

func Test_type_assertionTypeAssertionAnyTest2(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req any
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "TypeAssertionAnyTest2",
			args: args{

				req: utils.Empty[any](),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			TypeAssertionAnyTest(tt.args.req)

		})
	}
}

func Test_type_assertionTypeAssertionAnyTest3(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req any
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "TypeAssertionAnyTest3",
			args: args{

				req: utils.Empty[any](),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			TypeAssertionAnyTest(tt.args.req)

		})
	}
}

func Test_type_assertionTypeAssertionAnyTest4(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req any
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "TypeAssertionAnyTest4",
			args: args{

				req: utils.Empty[any](),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			TypeAssertionAnyTest(tt.args.req)

		})
	}
}

func Test_type_assertionTypeAssertionAnyTest5(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req any
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "TypeAssertionAnyTest5",
			args: args{

				req: utils.Empty[any](),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			TypeAssertionAnyTest(tt.args.req)

		})
	}
}

func Test_type_assertionTypeAssertionAnyTest6(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req any
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "TypeAssertionAnyTest6",
			args: args{

				req: utils.Empty[any](),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			TypeAssertionAnyTest(tt.args.req)

		})
	}
}

func Test_type_assertionTypeAssertionAnyTest7(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req any
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "TypeAssertionAnyTest7",
			args: args{

				req: utils.Empty[any](),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			TypeAssertionAnyTest(tt.args.req)

		})
	}
}

func Test_type_assertionTypeAssertionAnyTest(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req any
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "TypeAssertionAnyTest",
			args: args{

				req: utils.Empty[any](),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			TypeAssertionAnyTest(tt.args.req)

		})
	}
}

func Test_type_assertionTypeMultipleAssertionAnyTest0(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req1 any

		req2 any
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "TypeMultipleAssertionAnyTest0",
			args: args{

				req1: utils.Empty[any](),

				req2: utils.Empty[any](),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			TypeMultipleAssertionAnyTest(tt.args.req1, tt.args.req2)

		})
	}
}

func Test_type_assertionTypeMultipleAssertionAnyTest1(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req1 any

		req2 any
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "TypeMultipleAssertionAnyTest1",
			args: args{

				req1: utils.Empty[any](),

				req2: utils.Empty[any](),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			TypeMultipleAssertionAnyTest(tt.args.req1, tt.args.req2)

		})
	}
}

func Test_type_assertionTypeMultipleAssertionAnyTest2(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req1 any

		req2 any
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "TypeMultipleAssertionAnyTest2",
			args: args{

				req1: utils.Empty[any](),

				req2: utils.Empty[any](),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			TypeMultipleAssertionAnyTest(tt.args.req1, tt.args.req2)

		})
	}
}

func Test_type_assertionTypeMultipleAssertionAnyTest3(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req1 any

		req2 any
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "TypeMultipleAssertionAnyTest3",
			args: args{

				req1: utils.Empty[any](),

				req2: utils.Empty[any](),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			TypeMultipleAssertionAnyTest(tt.args.req1, tt.args.req2)

		})
	}
}

func Test_type_assertionTypeMultipleAssertionAnyTest4(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req1 any

		req2 any
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "TypeMultipleAssertionAnyTest4",
			args: args{

				req1: utils.Empty[any](),

				req2: utils.Empty[any](),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			TypeMultipleAssertionAnyTest(tt.args.req1, tt.args.req2)

		})
	}
}

func Test_type_assertionTypeMultipleAssertionAnyTest5(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req1 any

		req2 any
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "TypeMultipleAssertionAnyTest5",
			args: args{

				req1: utils.Empty[any](),

				req2: utils.Empty[any](),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			TypeMultipleAssertionAnyTest(tt.args.req1, tt.args.req2)

		})
	}
}

func Test_type_assertionTypeMultipleAssertionAnyTest6(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req1 any

		req2 any
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "TypeMultipleAssertionAnyTest6",
			args: args{

				req1: utils.Empty[any](),

				req2: utils.Empty[any](),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			TypeMultipleAssertionAnyTest(tt.args.req1, tt.args.req2)

		})
	}
}

func Test_type_assertionTypeMultipleAssertionAnyTest7(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req1 any

		req2 any
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "TypeMultipleAssertionAnyTest7",
			args: args{

				req1: utils.Empty[any](),

				req2: utils.Empty[any](),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			TypeMultipleAssertionAnyTest(tt.args.req1, tt.args.req2)

		})
	}
}

func Test_type_assertionTypeMultipleAssertionAnyTest8(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req1 any

		req2 any
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "TypeMultipleAssertionAnyTest8",
			args: args{

				req1: utils.Empty[any](),

				req2: utils.Empty[any](),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			TypeMultipleAssertionAnyTest(tt.args.req1, tt.args.req2)

		})
	}
}

func Test_type_assertionTypeMultipleAssertionAnyTest9(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req1 any

		req2 any
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "TypeMultipleAssertionAnyTest9",
			args: args{

				req1: utils.Empty[any](),

				req2: utils.Empty[any](),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			TypeMultipleAssertionAnyTest(tt.args.req1, tt.args.req2)

		})
	}
}

func Test_type_assertionTypeMultipleAssertionAnyTest10(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req1 any

		req2 any
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "TypeMultipleAssertionAnyTest10",
			args: args{

				req1: utils.Empty[any](),

				req2: utils.Empty[any](),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			TypeMultipleAssertionAnyTest(tt.args.req1, tt.args.req2)

		})
	}
}

func Test_type_assertionTypeMultipleAssertionAnyTest11(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req1 any

		req2 any
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "TypeMultipleAssertionAnyTest11",
			args: args{

				req1: utils.Empty[any](),

				req2: utils.Empty[any](),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			TypeMultipleAssertionAnyTest(tt.args.req1, tt.args.req2)

		})
	}
}

func Test_type_assertionTypeMultipleAssertionAnyTest12(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req1 any

		req2 any
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "TypeMultipleAssertionAnyTest12",
			args: args{

				req1: utils.Empty[any](),

				req2: utils.Empty[any](),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			TypeMultipleAssertionAnyTest(tt.args.req1, tt.args.req2)

		})
	}
}

func Test_type_assertionTypeMultipleAssertionAnyTest13(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req1 any

		req2 any
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "TypeMultipleAssertionAnyTest13",
			args: args{

				req1: utils.Empty[any](),

				req2: utils.Empty[any](),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			TypeMultipleAssertionAnyTest(tt.args.req1, tt.args.req2)

		})
	}
}

func Test_type_assertionTypeMultipleAssertionAnyTest14(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req1 any

		req2 any
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "TypeMultipleAssertionAnyTest14",
			args: args{

				req1: utils.Empty[any](),

				req2: utils.Empty[any](),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			TypeMultipleAssertionAnyTest(tt.args.req1, tt.args.req2)

		})
	}
}

func Test_type_assertionTypeMultipleAssertionAnyTest15(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req1 any

		req2 any
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "TypeMultipleAssertionAnyTest15",
			args: args{

				req1: utils.Empty[any](),

				req2: utils.Empty[any](),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			TypeMultipleAssertionAnyTest(tt.args.req1, tt.args.req2)

		})
	}
}

func Test_type_assertionTypeMultipleAssertionAnyTest(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req1 any

		req2 any
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "TypeMultipleAssertionAnyTest",
			args: args{

				req1: utils.Empty[any](),

				req2: utils.Empty[any](),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			TypeMultipleAssertionAnyTest(tt.args.req1, tt.args.req2)

		})
	}
}
