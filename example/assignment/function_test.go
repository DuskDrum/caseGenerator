// Code generated by codeParser. DO NOT EDIT.
// Code generated by codeParser. DO NOT EDIT.
// Code generated by codeParser. DO NOT EDIT.

package assignment

import (
	"caseGenerator/example/dict"
	"caseGenerator/utils"
	"github.com/samber/lo"
	"testing"
)

func Test_functionFunctionTest1(t *testing.T) {
	type fields struct {
	}
	type args struct {
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name:    "FunctionTest1",
			args:    args{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			FunctionTest1()

		})
	}
}

func Test_functionFunctionTest2(t *testing.T) {
	type fields struct {
	}
	type args struct {
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name:    "FunctionTest2",
			args:    args{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			FunctionTest2()

		})
	}
}

func Test_functionFunctionPackageTest1(t *testing.T) {
	type fields struct {
	}
	type args struct {
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name:    "FunctionPackageTest1",
			args:    args{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			FunctionPackageTest1()

		})
	}
}

func Test_functionFunctionPackageTest2(t *testing.T) {
	type fields struct {
	}
	type args struct {
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name:    "FunctionPackageTest2",
			args:    args{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			FunctionPackageTest2()

		})
	}
}

func Test_functionFunctionOutsideTest1(t *testing.T) {
	type fields struct {
	}
	type args struct {
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name:    "FunctionOutsideTest1",
			args:    args{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			FunctionOutsideTest1()

		})
	}
}

func Test_functionFunctionOutsideTest2(t *testing.T) {
	type fields struct {
	}
	type args struct {
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name:    "FunctionOutsideTest2",
			args:    args{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			FunctionOutsideTest2()

		})
	}
}

func Test_functionTargetFunction(t *testing.T) {
	type fields struct {
	}
	type args struct {
		str string

		int2 int

		dict dict.ExampleDict

		exampleDict *dict.ExampleDict
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "TargetFunction",
			args: args{

				str: utils.Empty[string](),

				int2: utils.Empty[int](),

				dict: utils.Empty[dict.ExampleDict](),

				exampleDict: lo.ToPtr(utils.Empty[dict.ExampleDict]()),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			TargetFunction(tt.args.str, tt.args.int2, tt.args.dict, tt.args.exampleDict)

		})
	}
}

func Test_functionTargetEmptyFunction(t *testing.T) {
	type fields struct {
	}
	type args struct {
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name:    "TargetEmptyFunction",
			args:    args{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			TargetEmptyFunction()

		})
	}
}
