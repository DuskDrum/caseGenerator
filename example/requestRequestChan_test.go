// Code generated by codeParser. DO NOT EDIT.
// Code generated by codeParser. DO NOT EDIT.
// Code generated by codeParser. DO NOT EDIT.

package example

import (
	"caseGenerator/example/dict"
	"testing"
)

func Test_requestRequestChan(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req1 <-chan string

		req2 chan<- string

		req3 <-chan Example

		req4 <-chan dict.ExampleDict

		req5 chan<- *dict.ExampleDict

		req6 chan<- [][][][][][][]*Example

		req7 chan<- [][][]map[Example][][][][]*dict.ExampleDict
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "9c09be78-f67d-11ee-bd7e-7af6acbff8ec",
			args: args{

				req1: make(<-chan string),

				req2: make(chan<- string),

				req3: make(<-chan Example),

				req4: make(<-chan dict.ExampleDict),

				req5: make(chan<- *dict.ExampleDict),

				req6: make(chan<- [][][][][][][]*Example),

				req7: make(chan<- [][][]map[Example][][][][]*dict.ExampleDict),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestChan(tt.args.req1, tt.args.req2, tt.args.req3, tt.args.req4, tt.args.req5, tt.args.req6, tt.args.req7)

		})
	}
}
