// Code generated by codeParser. DO NOT EDIT.
// Code generated by codeParser. DO NOT EDIT.
// Code generated by codeParser. DO NOT EDIT.

package example

import (
	"caseGenerator/utils"
	"testing"
)

func Test_requestRequestSimple(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req1 string

		req2 int

		req3 int32

		req4 float32

		req5 float64

		req6 bool

		req7 any

		req8 error
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "9c092616-f67d-11ee-bd7e-7af6acbff8ec",
			args: args{

				req1: utils.Empty[string](),

				req2: utils.Empty[int](),

				req3: utils.Empty[int32](),

				req4: utils.Empty[float32](),

				req5: utils.Empty[float64](),

				req6: utils.Empty[bool](),

				req7: utils.Empty[any](),

				req8: utils.Empty[error](),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestSimple(tt.args.req1, tt.args.req2, tt.args.req3, tt.args.req4, tt.args.req5, tt.args.req6, tt.args.req7, tt.args.req8)

		})
	}
}
