// Code generated by codeParser. DO NOT EDIT.
// Code generated by codeParser. DO NOT EDIT.
// Code generated by codeParser. DO NOT EDIT.

package example

import (
	"caseGenerator/example/dict"
	"testing"
)

func Test_requestRequestArray(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req1 []string

		req2 []int

		req3 []bool

		req4 []Example

		req5 []dict.ExampleDict

		req6 []string

		req7 []Example

		req8 []*dict.ExampleDict

		req9 map[string]string

		req10 map[*Example][]*dict.ExampleDict
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "1542613c-f59d-11ee-af52-7af6acbff8ed",
			args: args{

				req1: make([]string, 0, 10),

				req2: make([]int, 0, 10),

				req3: make([]bool, 0, 10),

				req4: make([]Example, 0, 10),

				req5: make([]dict.ExampleDict, 0, 10),

				req6: make([]string, 0, 10),

				req7: make([]Example, 0, 10),

				req8: make([]*dict.ExampleDict, 0, 10),

				req9: make(map[string]string, 0, 10),

				req10: make(map[*Example][]*dict.ExampleDict, 0, 10),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestArray(tt.args.req1, tt.args.req2, tt.args.req3, tt.args.req4, tt.args.req5, tt.args.req6, tt.args.req7, tt.args.req8, tt.args.req9, tt.args.req10)

		})
	}
}
