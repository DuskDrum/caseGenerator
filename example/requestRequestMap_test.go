// Code generated by codeParser. DO NOT EDIT.
// Code generated by codeParser. DO NOT EDIT.
// Code generated by codeParser. DO NOT EDIT.

package example

import (
	"caseGenerator/example/dict"
	"context"
	"testing"
	"time"
)

func Test_requestRequestMap(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req1 map[string]string

		req2 map[Example]dict.ExampleDict

		req3 map[*Example]*dict.ExampleDict

		req4 map[context.Context][]string

		req5 map[string][][][][][]*Example

		req6 map[string]map[*Example]map[context.Context]map[time.Time]bool
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "9c09a078-f67d-11ee-bd7e-7af6acbff8ec",
			args: args{

				req1: make(map[string]string, 10),

				req2: make(map[Example]dict.ExampleDict, 10),

				req3: make(map[*Example]*dict.ExampleDict, 10),

				req4: make(map[context.Context][]string, 10),

				req5: make(map[string][][][][][]*Example, 10),

				req6: make(map[string]map[*Example]map[context.Context]map[time.Time]bool, 10),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestMap(tt.args.req1, tt.args.req2, tt.args.req3, tt.args.req4, tt.args.req5, tt.args.req6)

		})
	}
}
