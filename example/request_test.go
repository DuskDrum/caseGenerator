// Code generated by codeParser. DO NOT EDIT.
// Code generated by codeParser. DO NOT EDIT.
// Code generated by codeParser. DO NOT EDIT.

package example

import (
	"caseGenerator/example/dict"
	"caseGenerator/utils"
	"context"
	"github.com/samber/lo"
	"testing"
	"time"
)

func Test_requestRequestSimple(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req1 string

		req2 int

		req3 int32

		req4 float32

		req5 float64

		req6 bool

		req7 any

		req8 error
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "b24d13b2-f9a5-11ee-a174-7af6acbff8ec",
			args: args{

				req1: utils.Empty[string](),

				req2: utils.Empty[int](),

				req3: utils.Empty[int32](),

				req4: utils.Empty[float32](),

				req5: utils.Empty[float64](),

				req6: utils.Empty[bool](),

				req7: utils.Empty[any](),

				req8: utils.Empty[error](),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestSimple(tt.args.req1, tt.args.req2, tt.args.req3, tt.args.req4, tt.args.req5, tt.args.req6, tt.args.req7, tt.args.req8)

		})
	}
}

func Test_requestRequestStruct(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req1 Example
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "b24d1682-f9a5-11ee-a174-7af6acbff8ec",
			args: args{

				req1: utils.Empty[Example](),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestStruct(tt.args.req1)

		})
	}
}

func Test_requestRequestPackStruct(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req1 dict.ExampleDict

		ctx context.Context

		orderTime time.Time
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "b24d19ca-f9a5-11ee-a174-7af6acbff8ec",
			args: args{

				req1: utils.Empty[dict.ExampleDict](),

				ctx: context.Background(),

				orderTime: time.Now(),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestPackStruct(tt.args.req1, tt.args.ctx, tt.args.orderTime)

		})
	}
}

func Test_requestRequestArray(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req1 []string

		req2 []int

		req3 []bool

		req4 []Example

		req5 []dict.ExampleDict

		req6 [][]string

		req7 [][][][]Example

		req8 [][]*dict.ExampleDict

		req9 [][][]map[string]string

		req10 [][][][][][]map[*Example][][][][]*dict.ExampleDict
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "b24d1e0c-f9a5-11ee-a174-7af6acbff8ec",
			args: args{

				req1: make([]string, 0, 10),

				req2: make([]int, 0, 10),

				req3: make([]bool, 0, 10),

				req4: make([]Example, 0, 10),

				req5: make([]dict.ExampleDict, 0, 10),

				req6: make([][]string, 0, 10),

				req7: make([][][][]Example, 0, 10),

				req8: make([][]*dict.ExampleDict, 0, 10),

				req9: make([][][]map[string]string, 0, 10),

				req10: make([][][][][][]map[*Example][][][][]*dict.ExampleDict, 0, 10),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestArray(tt.args.req1, tt.args.req2, tt.args.req3, tt.args.req4, tt.args.req5, tt.args.req6, tt.args.req7, tt.args.req8, tt.args.req9, tt.args.req10)

		})
	}
}

func Test_requestRequestEllipsis(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req2 string

		req1 []string
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "b24d1ec0-f9a5-11ee-a174-7af6acbff8ec",
			args: args{

				req2: utils.Empty[string](),

				req1: []string{utils.Empty[string]()},
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestEllipsis(tt.args.req2, tt.args.req1...)

		})
	}
}

func Test_requestRequestVariableParam(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req1 string

		req2 string

		req3 string

		req4 string
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "b24d2168-f9a5-11ee-a174-7af6acbff8ec",
			args: args{

				req1: utils.Empty[string](),

				req2: utils.Empty[string](),

				req3: utils.Empty[string](),

				req4: utils.Empty[string](),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestVariableParam(tt.args.req1, tt.args.req2, tt.args.req3, tt.args.req4)

		})
	}
}

func Test_requestRequestMap(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req1 map[string]string

		req2 map[Example]dict.ExampleDict

		req3 map[*Example]*dict.ExampleDict

		req4 map[context.Context][]string

		req5 map[string][][][][][]*Example

		req6 map[string]map[*Example]map[context.Context]map[time.Time]bool
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "b24d2438-f9a5-11ee-a174-7af6acbff8ec",
			args: args{

				req1: make(map[string]string, 10),

				req2: make(map[Example]dict.ExampleDict, 10),

				req3: make(map[*Example]*dict.ExampleDict, 10),

				req4: make(map[context.Context][]string, 10),

				req5: make(map[string][][][][][]*Example, 10),

				req6: make(map[string]map[*Example]map[context.Context]map[time.Time]bool, 10),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestMap(tt.args.req1, tt.args.req2, tt.args.req3, tt.args.req4, tt.args.req5, tt.args.req6)

		})
	}
}

func Test_requestRequestStar(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req1 *Example

		req2 *dict.ExampleDict

		req3 []*Example

		req4 *[]Example

		req5 *[][][][]*Example

		req6 *map[string]string

		req7 *map[*Example]map[*dict.ExampleDict][][][][]*Example
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "b24d278a-f9a5-11ee-a174-7af6acbff8ec",
			args: args{

				req1: lo.ToPtr(utils.Empty[Example]()),

				req2: lo.ToPtr(utils.Empty[dict.ExampleDict]()),

				req3: make([]*Example, 0, 10),

				req4: lo.ToPtr(make([]Example, 0, 10)),

				req5: lo.ToPtr(make([][][][]*Example, 0, 10)),

				req6: lo.ToPtr(make(map[string]string, 10)),

				req7: lo.ToPtr(make(map[*Example]map[*dict.ExampleDict][][][][]*Example, 10)),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestStar(tt.args.req1, tt.args.req2, tt.args.req3, tt.args.req4, tt.args.req5, tt.args.req6, tt.args.req7)

		})
	}
}

func Test_requestRequestChan(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req1 <-chan string

		req2 chan<- string

		req3 <-chan Example

		req4 <-chan dict.ExampleDict

		req5 chan<- *dict.ExampleDict

		req6 chan<- [][][][][][][]*Example

		req7 chan<- [][][]map[Example][][][][]*dict.ExampleDict
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "b24d2ac8-f9a5-11ee-a174-7af6acbff8ec",
			args: args{

				req1: make(<-chan string),

				req2: make(chan<- string),

				req3: make(<-chan Example),

				req4: make(<-chan dict.ExampleDict),

				req5: make(chan<- *dict.ExampleDict),

				req6: make(chan<- [][][][][][][]*Example),

				req7: make(chan<- [][][]map[Example][][][][]*dict.ExampleDict),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestChan(tt.args.req1, tt.args.req2, tt.args.req3, tt.args.req4, tt.args.req5, tt.args.req6, tt.args.req7)

		})
	}
}

func Test_requestRequestGeneric(t *testing.T) {
	type fields struct {
	}
	type args struct {
		list []any

		process func([]any) []any

		batchSize int
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "b24d2b9a-f9a5-11ee-a174-7af6acbff8ec",
			args: args{

				list: make([]any, 0, 10),

				process: nil,

				batchSize: utils.Empty[int](),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestGeneric(tt.args.list, tt.args.process, tt.args.batchSize)

		})
	}
}

func Test_requestRequestGenericValue(t *testing.T) {
	type fields struct {
	}
	type args struct {
		p *bool
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "b24d2f1e-f9a5-11ee-a174-7af6acbff8ec",
			args: args{

				p: lo.ToPtr(utils.Empty[bool]()),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestGenericValue(tt.args.p)

		})
	}
}

func Test_requestRequestGenericEquals(t *testing.T) {
	type fields struct {
	}
	type args struct {
		s1 *string

		s2 *string
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "b24d30e0-f9a5-11ee-a174-7af6acbff8ec",
			args: args{

				s1: lo.ToPtr(utils.Empty[string]()),

				s2: lo.ToPtr(utils.Empty[string]()),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestGenericEquals(tt.args.s1, tt.args.s2)

		})
	}
}

func Test_requestRequestGenericNoEquals(t *testing.T) {
	type fields struct {
	}
	type args struct {
		s1 *string

		s2 *string
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "b24d31a8-f9a5-11ee-a174-7af6acbff8ec",
			args: args{

				s1: lo.ToPtr(utils.Empty[string]()),

				s2: lo.ToPtr(utils.Empty[string]()),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestGenericNoEquals(tt.args.s1, tt.args.s2)

		})
	}
}

func Test_requestRequestGenericPointerToStruct(t *testing.T) {
	type fields struct {
	}
	type args struct {
		pointer *any
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "b24d323e-f9a5-11ee-a174-7af6acbff8ec",
			args: args{

				pointer: lo.ToPtr(utils.Empty[any]()),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestGenericPointerToStruct(tt.args.pointer)

		})
	}
}

func Test_requestToPoint(t *testing.T) {
	type fields struct {
	}
	type args struct {
		source any
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "b24d32ca-f9a5-11ee-a174-7af6acbff8ec",
			args: args{

				source: utils.Empty[any](),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			ToPoint(tt.args.source)

		})
	}
}

func Test_requestRequestFunc(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req1 func(string, Example, context.Context) (dict.ExampleDict, error)
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "b24d3478-f9a5-11ee-a174-7af6acbff8ec",
			args: args{

				req1: nil,
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestFunc(tt.args.req1)

		})
	}
}

func Test_requestRequestBlankFunc(t *testing.T) {
	type fields struct {
	}
	type args struct {
		req1 func()
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name: "b24d34e6-f9a5-11ee-a174-7af6acbff8ec",
			args: args{

				req1: nil,
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestBlankFunc(tt.args.req1)

		})
	}
}

func Test_requestRequestResponseSimpleFunc(t *testing.T) {
	type fields struct {
	}
	type args struct {
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name:    "b24d3554-f9a5-11ee-a174-7af6acbff8ec",
			args:    args{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestResponseSimpleFunc()

		})
	}
}

func Test_requestRequestResponseStruct(t *testing.T) {
	type fields struct {
	}
	type args struct {
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name:    "b24d35b8-f9a5-11ee-a174-7af6acbff8ec",
			args:    args{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestResponseStruct()

		})
	}
}

func Test_requestRequestResponsePackStruct(t *testing.T) {
	type fields struct {
	}
	type args struct {
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name:    "b24d3626-f9a5-11ee-a174-7af6acbff8ec",
			args:    args{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestResponsePackStruct()

		})
	}
}

func Test_requestRequestResponseFunc(t *testing.T) {
	type fields struct {
	}
	type args struct {
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name:    "b24d36c6-f9a5-11ee-a174-7af6acbff8ec",
			args:    args{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestResponseFunc()

		})
	}
}

func Test_requestRequestResponseBlankFunc(t *testing.T) {
	type fields struct {
	}
	type args struct {
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name:    "b24d3720-f9a5-11ee-a174-7af6acbff8ec",
			args:    args{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestResponseBlankFunc()

		})
	}
}

func Test_requestRequestResponseArray(t *testing.T) {
	type fields struct {
	}
	type args struct {
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name:    "b24d37e8-f9a5-11ee-a174-7af6acbff8ec",
			args:    args{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestResponseArray()

		})
	}
}

func Test_requestRequestResponseVariableParam(t *testing.T) {
	type fields struct {
	}
	type args struct {
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name:    "b24d3842-f9a5-11ee-a174-7af6acbff8ec",
			args:    args{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestResponseVariableParam()

		})
	}
}

func Test_requestRequestResponseMap(t *testing.T) {
	type fields struct {
	}
	type args struct {
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name:    "b24d38ce-f9a5-11ee-a174-7af6acbff8ec",
			args:    args{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestResponseMap()

		})
	}
}

func Test_requestRequestResponseStar(t *testing.T) {
	type fields struct {
	}
	type args struct {
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name:    "b24d3946-f9a5-11ee-a174-7af6acbff8ec",
			args:    args{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestResponseStar()

		})
	}
}

func Test_requestRequestResponseChan(t *testing.T) {
	type fields struct {
	}
	type args struct {
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name:    "b24d39c8-f9a5-11ee-a174-7af6acbff8ec",
			args:    args{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestResponseChan()

		})
	}
}

func Test_requestRequestResponseGeneric(t *testing.T) {
	type fields struct {
	}
	type args struct {
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name:    "b24d3a36-f9a5-11ee-a174-7af6acbff8ec",
			args:    args{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestResponseGeneric()

		})
	}
}

func Test_requestRequestResponseGenericValue(t *testing.T) {
	type fields struct {
	}
	type args struct {
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name:    "b24d3afe-f9a5-11ee-a174-7af6acbff8ec",
			args:    args{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestResponseGenericValue()

		})
	}
}
