// Code generated by codeParser. DO NOT EDIT.
// Code generated by codeParser. DO NOT EDIT.
// Code generated by codeParser. DO NOT EDIT.

package example

import (
	"testing"
)

func Test_request_problemRequestResponseSimpleFuncProblem(t *testing.T) {
	type fields struct {
	}
	type args struct {
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name:    "89abc55a-fa65-11ee-a63f-7af6acbff8ec",
			args:    args{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestResponseSimpleFuncProblem()

		})
	}
}

func Test_request_problemRequestResponseStructProblem(t *testing.T) {
	type fields struct {
	}
	type args struct {
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name:    "89abcf14-fa65-11ee-a63f-7af6acbff8ec",
			args:    args{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestResponseStructProblem()

		})
	}
}

func Test_request_problemRequestResponsePackStructProblem(t *testing.T) {
	type fields struct {
	}
	type args struct {
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name:    "89abcf64-fa65-11ee-a63f-7af6acbff8ec",
			args:    args{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestResponsePackStructProblem()

		})
	}
}

func Test_request_problemRequestResponseFuncProblem(t *testing.T) {
	type fields struct {
	}
	type args struct {
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name:    "89abcf96-fa65-11ee-a63f-7af6acbff8ec",
			args:    args{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestResponseFuncProblem()

		})
	}
}

func Test_request_problemRequestResponseBlankFuncProblem(t *testing.T) {
	type fields struct {
	}
	type args struct {
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name:    "89abcfbe-fa65-11ee-a63f-7af6acbff8ec",
			args:    args{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestResponseBlankFuncProblem()

		})
	}
}

func Test_request_problemRequestResponseArrayProblem(t *testing.T) {
	type fields struct {
	}
	type args struct {
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name:    "89abd004-fa65-11ee-a63f-7af6acbff8ec",
			args:    args{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestResponseArrayProblem()

		})
	}
}

func Test_request_problemRequestResponseVariableParamProblem(t *testing.T) {
	type fields struct {
	}
	type args struct {
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name:    "89abd02c-fa65-11ee-a63f-7af6acbff8ec",
			args:    args{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestResponseVariableParamProblem()

		})
	}
}

func Test_request_problemRequestResponseMapProblem(t *testing.T) {
	type fields struct {
	}
	type args struct {
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name:    "89abd9a0-fa65-11ee-a63f-7af6acbff8ec",
			args:    args{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestResponseMapProblem()

		})
	}
}

func Test_request_problemRequestResponseStarProblem(t *testing.T) {
	type fields struct {
	}
	type args struct {
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name:    "89abdafe-fa65-11ee-a63f-7af6acbff8ec",
			args:    args{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestResponseStarProblem()

		})
	}
}

func Test_request_problemRequestResponseChanProblem(t *testing.T) {
	type fields struct {
	}
	type args struct {
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name:    "89abdb8a-fa65-11ee-a63f-7af6acbff8ec",
			args:    args{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestResponseChanProblem()

		})
	}
}

func Test_request_problemRequestResponseGenericProblem(t *testing.T) {
	type fields struct {
	}
	type args struct {
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name:    "89abdc5c-fa65-11ee-a63f-7af6acbff8ec",
			args:    args{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestResponseGenericProblem()

		})
	}
}

func Test_request_problemRequestResponseGenericValueProblem(t *testing.T) {
	type fields struct {
	}
	type args struct {
	}
	tests := []struct {
		args    args
		name    string
		fields  fields
		wantErr bool
	}{
		{
			name:    "89abdcfc-fa65-11ee-a63f-7af6acbff8ec",
			args:    args{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				//统一处理
				if err := recover(); err != nil {
					t.Log("recover了")
				}
			}()

			RequestResponseGenericValueProblem()

		})
	}
}
